#Nome: Lucas Kenji Kikuchi - RM554424
#Data 26/10/2024
#Luiz Wanderley Tavares
#Computational Thinking Using Python

from flask import Flask, jsonify, request
import oracledb
import json

app = Flask(__name__)

# create table filmes (
#     id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#     filme varchar2(50),
#     ano number,
#     genero varchar2(50),
#     ator varchar2(50),
#     atriz varchar2(50)
# )

# Função para conectar ao banco de dados Oracle
def get_db_connection():
    DATA_FILE = "oracle_conn.json"
    file = open(DATA_FILE, 'r')
    xfile = json.load(file)

    connection = oracledb.connect(
        user=xfile[0]["user"],
        password=xfile[0]["password"],
        dsn=xfile[0]["dsn"] 
    )
    return connection

# Rota para retornar todos os filmes (GET)
@app.route('/filmes', methods=['GET'])
def get_filmes():
    connection = get_db_connection()
    cursor = connection.cursor()

    id = request.args.get('id')
    filme = request.args.get('filme')
    ano = request.args.get('ano')
    genero = request.args.get('genero')
    ator = request.args.get('ator')
    atriz = request.args.get('atriz')
    
    query = "SELECT * FROM FILMES WHERE 1=1"
    params = []
    
    if id:
        query += " AND ID = :id"
        params.append(id)
    if filme:
        query += " AND filme = :filme"
        params.append(filme)
    if ano:
        query += " AND ano = :ano"
        params.append(ano)
    if genero:
        query += " AND genero = :genero"
        params.append(genero)
    if ator:
        query += " AND ator = :ator"
        params.append(ator)
    if atriz:
        query += " AND atriz = :atriz"
        params.append(atriz)

    
    cursor.execute(query, params)
    rows = cursor.fetchall()
    
    cursor.close()
    connection.close()
    
    if rows:
        filme = [{"id": row[0], "filme": row[1], "ano":  row[2], "genero":  row[3], "ator":  row[4], "atriz": row[5]} for row in rows] 
        return jsonify(filme)
    else:
        return jsonify({"message": "Filme não encontrado"}), 404
    
# Rota para buscar um filme específico por ID (GET)
@app.route('/filmes/<int:id>', methods=['GET'])
def get_filme_id(id):
    connection = get_db_connection()
    cursor = connection.cursor()
    
    # Consulta SQL para buscar um filme por ID
    cursor.execute("SELECT * FROM FILMES WHERE id = :id", [id])
    row = cursor.fetchone()
    
    cursor.close()
    connection.close()
    
    if row:
        filme = [{"id": row[0], "filme": row[1], "ano":  row[2], "genero":  row[3], "ator":  row[4], "atriz": row[5]}] 
        return jsonify(filme)
    else:
        return jsonify({"message": "Filme não encontrado"}), 404


# Rota para adicionar um novo filme (POST)
@app.route('/filmes', methods=['POST'])
def add_filme():
    novo_filme = request.json
    filme = novo_filme.get('filme')
    ano = novo_filme.get('ano')
    genero = novo_filme.get('genero')
    ator = novo_filme.get('ator')
    atriz = novo_filme.get('atriz')
    
    connection = get_db_connection()
    cursor = connection.cursor()
    
    # Consulta SQL para inserir um novo filme
    cursor.execute("""
        INSERT INTO FILMES (filme, ano, genero, ator, atriz)
        VALUES (:filme, :ano, :genero, :ator, :atriz)
    """, [filme, ano, genero, ator, atriz])
    
    connection.commit()  # Confirma a transação
    cursor.close()
    connection.close()
    
    return jsonify({"message": "Filme adicionado"}), 201

# Rota para atualizar um filme existente (PUT)
@app.route('/filmes/<int:id>', methods=['PUT'])
def update_filme(id):
    filme_atualizado = request.json
    filme = filme_atualizado.get('filme')
    ano = filme_atualizado.get('ano')
    genero = filme_atualizado.get('genero')
    ator = filme_atualizado.get('ator')
    atriz = filme_atualizado.get('atriz')
    
    connection = get_db_connection()
    cursor = connection.cursor()
    
    # Consulta SQL para atualizar um filme
    cursor.execute("""
        UPDATE FILMES
        SET filme = :filme, ano = :ano, genero = :genero, ator = :ator, atriz = :atriz
        WHERE id = :id
    """, [filme, ano, genero, ator, atriz, id])
    
    connection.commit()  # Confirma a transação
    cursor.close()
    connection.close()
    
    return jsonify({"message": "Filme atualizado"}), 200

# Rota para deletar um filme (DELETE)
@app.route('/filmes/<int:id>', methods=['DELETE'])
def delete_filme(id):
    connection = get_db_connection()
    cursor = connection.cursor()
    
    # Consulta SQL para deletar um filme por ID
    cursor.execute("DELETE FROM FILMES WHERE id = :id", [id])
    
    connection.commit()  # Confirma a transação
    cursor.close()
    connection.close()
    
    return jsonify({"message": "Filme removido"}), 200

if __name__ == '__main__':
    app.run(debug=False)